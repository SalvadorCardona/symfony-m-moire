/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/authors": {
    /** Retrieves the collection of Author resources. */
    get: operations["getAuthorCollection"];
    /** Creates a Author resource. */
    post: operations["postAuthorCollection"];
    parameters: {};
  };
  "/api/authors/{id}": {
    /** Retrieves a Author resource. */
    get: operations["getAuthorItem"];
    /** Replaces the Author resource. */
    put: operations["putAuthorItem"];
    /** Removes the Author resource. */
    delete: operations["deleteAuthorItem"];
    /** Updates the Author resource. */
    patch: operations["patchAuthorItem"];
    parameters: {};
  };
  "/api/books": {
    /** Retrieves the collection of Book resources. */
    get: operations["getBookCollection"];
    /** Creates a Book resource. */
    post: operations["postBookCollection"];
    parameters: {};
  };
  "/api/books/{id}": {
    /** Retrieves a Book resource. */
    get: operations["getBookItem"];
    /** Replaces the Book resource. */
    put: operations["putBookItem"];
    /** Removes the Book resource. */
    delete: operations["deleteBookItem"];
    /** Updates the Book resource. */
    patch: operations["patchBookItem"];
    parameters: {};
  };
}

export interface components {
  schemas: {
    Author: {
      id?: number;
      books?: string[];
    };
    "Author.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      books?: string[];
    };
    Book: {
      id?: number;
      name?: string | null;
      /** Format: iri-reference */
      author?: string | null;
    };
    "Book.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string | null;
      /** Format: iri-reference */
      author?: string | null;
    };
  };
  responses: {};
  parameters: {};
  requestBodies: {};
  headers: {};
}

export interface operations {
  /** Retrieves the collection of Author resources. */
  getAuthorCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Author collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Author.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Author"][];
          "text/html": components["schemas"]["Author"][];
        };
      };
    };
  };
  /** Creates a Author resource. */
  postAuthorCollection: {
    parameters: {};
    responses: {
      /** Author resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Author.jsonld"];
          "application/json": components["schemas"]["Author"];
          "text/html": components["schemas"]["Author"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Author resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Author.jsonld"];
        "application/json": components["schemas"]["Author"];
        "text/html": components["schemas"]["Author"];
      };
    };
  };
  /** Retrieves a Author resource. */
  getAuthorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Author resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Author.jsonld"];
          "application/json": components["schemas"]["Author"];
          "text/html": components["schemas"]["Author"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Replaces the Author resource. */
  putAuthorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Author resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Author.jsonld"];
          "application/json": components["schemas"]["Author"];
          "text/html": components["schemas"]["Author"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Author resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Author.jsonld"];
        "application/json": components["schemas"]["Author"];
        "text/html": components["schemas"]["Author"];
      };
    };
  };
  /** Removes the Author resource. */
  deleteAuthorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Author resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Updates the Author resource. */
  patchAuthorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Author resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Author.jsonld"];
          "application/json": components["schemas"]["Author"];
          "text/html": components["schemas"]["Author"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Author resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Author"];
      };
    };
  };
  /** Retrieves the collection of Book resources. */
  getBookCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Book collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Book.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Book"][];
          "text/html": components["schemas"]["Book"][];
        };
      };
    };
  };
  /** Creates a Book resource. */
  postBookCollection: {
    parameters: {};
    responses: {
      /** Book resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Book.jsonld"];
          "application/json": components["schemas"]["Book"];
          "text/html": components["schemas"]["Book"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Book resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Book.jsonld"];
        "application/json": components["schemas"]["Book"];
        "text/html": components["schemas"]["Book"];
      };
    };
  };
  /** Retrieves a Book resource. */
  getBookItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Book resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Book.jsonld"];
          "application/json": components["schemas"]["Book"];
          "text/html": components["schemas"]["Book"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Replaces the Book resource. */
  putBookItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Book resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Book.jsonld"];
          "application/json": components["schemas"]["Book"];
          "text/html": components["schemas"]["Book"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Book resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Book.jsonld"];
        "application/json": components["schemas"]["Book"];
        "text/html": components["schemas"]["Book"];
      };
    };
  };
  /** Removes the Book resource. */
  deleteBookItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Book resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Updates the Book resource. */
  patchBookItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Book resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Book.jsonld"];
          "application/json": components["schemas"]["Book"];
          "text/html": components["schemas"]["Book"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Book resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Book"];
      };
    };
  };
}

export interface external {}
